#+REVEAL_THEME: blood
#+options: num:nil toc:nil 
#+title: Job-scheduler program
#+author: Shreyas Ragavan
#+OPTIONS: reveal_control:t reveal_progress:t, reveal_history:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t 
#+REVEAL_PLUGINS: (zoom)
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_MIN_SCALE: 0.5

* [[https://shrysr.github.io/jobscheduler/readme.html][View the presentation]]                                            :noexport:

* Project Goals
- Reliable and continuous software license utilisation in a
    First-In-First-Out (FIFO) basis, without manual intervention.

- Streamlined project management and resource utilisation, keeping
  track of multiple distributed ANSYS CFX simulations of various types
  and priorities.

- Customised workflow and simplified interface to submit simulations
  for the entire team.

* Algorithm
#+ATTR_HTML: :height 300%, :width 200%
[[./data/scheduler-algo.png]]

* Results Achieved 

#+ATTR_REVEAL: :frag highlight-blue
- Increased software license utilisation by *50+%*.

- Saved *40min (75%)* in a critical design step.

#+ATTR_REVEAL: :frag (roll-in)
- Eliminated repetitive manual script setups to submit multiple simulations.

- Significantly improved project management and output.

* Results Achieved 
#+ATTR_REVEAL: :frag (roll-in)
- Enabled the use of consistent solver and memory utilisation
  parameters and settings, allowing efficient deployment and reducing
  inefficiencies due to errors.

- Allowed optimal or perfect utilisation of available licensing
  scheme, resulting in a significant increase in team output and
  productivity.

* Relevant Links
** [[https://github.com/shrysr/jobscheduler][Code On Github]]
** Detailed notes
** Tools used and links
- Written with Python 2.7, using portable python, Spyder, Notepad ++ and Sublime Text 3.

* Detailed notes                                                   :noexport:

The idea behind the project was to create a multi-platform job
scheduler for ANSYS CFX that has a balance between sophistication and
ease of deployment (and management), and of course customised to the
team workflow.

Typically job schedulers and load balancing programs are relatively
sophisticated and complex to setup with several pre-requisites and
constraints. Such complexity dictates expensive commercial support and
licensing considerations.

Once called, the program basically loops through pre designated
folders and lists .def files based on the *last modified* date
available in Windows. The system interaction is via BASH scripts
created via the Python code, as well as the python OS library. There
are several in-built flags to support priority, pausing a particular
cluster, logging data and troubleshooting.

* Archive                                                          :noexport:

This code was originally developed for my R&D Center  @ *Wilo SE*. A modified (and more generic) version of the same is available here. It is simply meant to fire away simulations, triggered by a scheduler software. (Tested with the free version of *System Scheduler*).

- run every minute via the free version of [[https://www.splinterware.com/products/scheduler.html][System Scheduler]]. 

The program basically loops through pre designated folders and lists .def files based on the *last modified* date available in Windows. The system interaction is via BASH scripts created via the Python code.

This is a project in progress, with the goal of becoming a multi-platform job scheduler for ANSYS CFX that has a balance between sophistication and ease of deployment. Current job schedulers are relatively very sophisticated and complex to setup with several pre-requisites. As of now, this program is ideally suited for individuals and small teams, with 1-3 computing clusters working in tandem.

=======
** Python based portable, scalable job scheduler with multiple priorities - for ANSYS CFX.
** Written with Python 2.7, using portable python, spyder, Notepad ++ and Sublime Text 3.
** See the [Wiki](https://github.com/shrysr/jobscheduler/wiki/) for the project goals, algorithm and other details.

** The program doesn't just work out of the box (for now). It needs some manual setting up. However, once setup - it should keep running without any problems.

** A zip file of the folder structure as it is, is provided. It should be downloaded and unzipped to the desired location where the simulations will run and be stored.

** System scheduler install is required, which will launch the python program every minute. This needs to be installed only on the master nodes.

