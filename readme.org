#+REVEAL_THEME: blood
#+options: num:nil toc:nil 
#+title: Job scheduler
#+author: Shreyas Ragavan
#+OPTIONS: reveal_control:t reveal_progress:t, reveal_history:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t 
#+REVEAL_PLUGINS: (zoom)
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_MIN_SCALE: 0.5
#+EXPORT_FILE_NAME: index.html

* [[https://shrysr.github.io/jobscheduler/index.html][View the presentation]]                                            :noexport:

* Quick note
This presentation was created using [[https://revealjs.com/][reveal.js]], leveraging the
[[http://jr0cket.co.uk/slides/revealjs.html][org-reveal]] package in [[https://www.gnu.org/software/emacs/][Emacs]].

#+ATTR_REVEAL: :frag highlight-blue
Type '?' to see a list of the keyboard shortcuts. 

#+ATTR_REVEAL: :frag roll-in
- Swipe or use the arrow keys / n / space to navigate.
- Navigate/Swipe horizontally for main slides
- Navigate/Swipe downwards for sub-slides (if any)
- Menu key (bottom right corner) to jump to slides.
- Hit 'o' for an overview of the slides. 

* Conception
- Available distributed simulation solver licenses were drastically under-utilised
  due to the lack of a cohesive management system to run distributed simulations.

- Team workflow and productivity was severely impacted due manual
  firing of simulations.

* Conception ... 
- It was extremely cumbersome to submit test simulations to facilitate
  learning!

- Potentially: A huge change could be achieved with a simple system to
  fire simulations *24/7, utilizing the entire capacity* through a
  logical and optimized basis.

* Project Goals
- Reliable, automated and continuous software license utilisation in a
    First-In-First-Out (FIFO) basis, without manual intervention.

- Streamlined project management and resource utilisation, keeping
  track of multiple, distributed ANSYS CFX simulations of various types
  and priorities.

* Project Goals ...
- Customised workflow and simplified interface to submit simulations
  for the entire team.

* Pseudo Algorithm
#+ATTR_HTML: :height 300%, :width 200%
[[./data/scheduler-algo.png]]

* Algorithm description

Hierarchy based logic: loop through a set order of folders and run the
latest simulation files. The folders are meant to serve as multiple
priority levels, and at times simulation size filters.
- For example, a Small (short) run's priority would be higher than a
  non-priority, larger job at any time
- And then a *Priority* folder whose runs would run first no matter
  what.

* Results Achieved 

#+ATTR_REVEAL: :frag highlight-blue
- Increased software license utilisation by *50+%*.

- Saved *40min (75%)* in a critical design step.

#+ATTR_REVEAL: :frag roll-in
- Eliminated repetitive manual script setups to submit multiple simulations.

- Significantly improved project management and output.

* Results Achieved ...
#+ATTR_REVEAL: :frag (roll-in)
- Enabled the use of consistent solver and memory utilisation
  parameters and settings, allowing efficient deployment and reducing
  inefficiencies due to errors.

- Allowed optimal or perfect utilisation of available licensing
  scheme, resulting in a significant increase in team output and
  productivity.

* Relevant Links / Information
** Tools used
- Written with Python 2.7, using portable python, Spyder, Notepad ++ and Sublime Text 3.
- [[https://www.splinterware.com/products/scheduler.html][System Scheduler]]
- Documentation and presentation re-prepared using Emacs and org-mode and org-reveal at a later time.
** [[https://github.com/shrysr/jobscheduler][Code On Github]]
** [[https://github.com/shrysr/jobscheduler#detailed-notes-1][Detailed notes]]
** [[https://github.com/shrysr/jobscheduler/wiki][Wiki]]
* Detailed notes                                                   :noexport:
:PROPERTIES:
:ID:       62BF46EC-36C0-40BE-9A0F-30B3A8DC69A0
:END:

** In a nutshell 

This code was originally developed for my R&D Center @ *Wilo SE*. A
modified (and more generic) version of the same is available here. It
is simply meant to fire away simulations, triggered every minute by a scheduler
software. (Tested with the free version of [[https://www.splinterware.com/products/scheduler.html][*System Scheduler]]*).

This was achieved through a simple python script logic: loop through a
set order of folders and run the latest simulation files. The folders
are meant to serve as multiple priority levels, and at times
simulation size filters.
- For example, a small (short) run's priority would be higher than a
  non-priority, larger job at any time
- And then a Priority folder whose runs would run first no matter
  what.

** Objective

The idea behind the project was to create a multi-platform job
scheduler for ANSYS CFX that has a balance between sophistication and
ease of deployment (and management), and of course customised to the
team workflow. 

Considering the numerous IT constraints and the situation at hand,
this script just ticked all the boxes rather elegantly.

Open source solutions do exist. As of today, my approach would be
different and I would leverage Pandas in python for a database of
simulations and other automation tools like Airflow.

Job schedulers and load balancing programs are relatively
sophisticated and complex to setup with several pre-requisites and
constraints. Such complexity dictates expensive commercial support and
licensing considerations for a team requiring a reliable system.

** How it works

Once called, the program basically loops through pre designated
folders and lists .def files based on the *last modified* date available
in Windows. 

The system interaction is via BASH scripts created via the Python
code, as well as the python OS library. Using this approach, with
flags to check the program status was just simpler than building some
sort of constantly running python daemon.

There are several in-built flags to support setting priorities,
pausing a particular cluster, logging data and troubleshooting.

* Archive                                                          :noexport:



- run every minute via the free version of [[https://www.splinterware.com/products/scheduler.html][System Scheduler]]. 

The program basically loops through pre designated folders and lists .def files based on the *last modified* date available in Windows. The system interaction is via BASH scripts created via the Python code.

This is a project in progress, with the goal of becoming a multi-platform job scheduler for ANSYS CFX that has a balance between sophistication and ease of deployment. Current job schedulers are relatively very sophisticated and complex to setup with several pre-requisites. As of now, this program is ideally suited for individuals and small teams, with 1-3 computing clusters working in tandem.

=======
** Python based portable, scalable job scheduler with multiple priorities - for ANSYS CFX.
** Written with Python 2.7, using portable python, spyder, Notepad ++ and Sublime Text 3.
** See the [Wiki](https://github.com/shrysr/jobscheduler/wiki/) for the project goals, algorithm and other details.

** The program doesn't just work out of the box (for now). It needs some manual setting up. However, once setup - it should keep running without any problems.

** A zip file of the folder structure as it is, is provided. It should be downloaded and unzipped to the desired location where the simulations will run and be stored.

** System scheduler install is required, which will launch the python program every minute. This needs to be installed only on the master nodes.

